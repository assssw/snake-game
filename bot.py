import telebot
from telebot.types import WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
import json
import os
from datetime import datetime, timedelta
import sqlite3
import threading
import time
import logging
import traceback

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = '8028147928:AAHC2PSGPmrYYRn7vSQ5sXnw4QNrbX69ZU8'
ADMIN_ID = 1454515378 # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID
CHANNEL_ID = '@mariartytt'  # ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
bot = telebot.TeleBot(TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('snake_game.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (user_id TEXT PRIMARY KEY,
                  username TEXT,
                  best_score INTEGER DEFAULT 0,
                  sun INTEGER DEFAULT 0,
                  has_sun_skin BOOLEAN DEFAULT 0,
                  has_premium_skin BOOLEAN DEFAULT 0,
                  last_game TEXT,
                  registration_date TEXT)''')
    
    c.execute('''CREATE TABLE IF NOT EXISTS transactions
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  user_id TEXT,
                  type TEXT,
                  amount INTEGER,
                  timestamp TEXT,
                  FOREIGN KEY (user_id) REFERENCES users(user_id))''')
    
    conn.commit()
    conn.close()

init_db()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def get_user_data(user_id):
    conn = sqlite3.connect('snake_game.db')
    c = conn.cursor()
    c.execute('SELECT * FROM users WHERE user_id = ?', (str(user_id),))
    data = c.fetchone()
    conn.close()
    if data:
        return {
            'user_id': data[0],
            'username': data[1],
            'best_score': data[2],
            'sun': data[3],
            'has_sun_skin': bool(data[4]),
            'has_premium_skin': bool(data[5]),
            'last_game': data[6],
            'registration_date': data[7]
        }
    return None

def update_user_data(user_id, data):
    conn = sqlite3.connect('snake_game.db')
    c = conn.cursor()
    try:
        c.execute('''INSERT OR REPLACE INTO users 
                     (user_id, username, best_score, sun, has_sun_skin, has_premium_skin, last_game)
                     VALUES (?, ?, ?, ?, ?, ?, ?)''',
                 (str(user_id), data.get('username'), data.get('best_score', 0),
                  data.get('sun', 0), data.get('has_sun_skin', False),
                  data.get('has_premium_skin', False), datetime.now().isoformat()))
        conn.commit()
    except Exception as e:
        logger.error(f"Error updating user data: {e}")
        conn.rollback()
    finally:
        conn.close()

def log_transaction(user_id, type, amount):
    conn = sqlite3.connect('snake_game.db')
    c = conn.cursor()
    try:
        c.execute('''INSERT INTO transactions (user_id, type, amount, timestamp)
                     VALUES (?, ?, ?, ?)''',
                 (str(user_id), type, amount, datetime.now().isoformat()))
        conn.commit()
    except Exception as e:
        logger.error(f"Error logging transaction: {e}")
        conn.rollback()
    finally:
        conn.close()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_webapp_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(
        text="üéÆ –ò–≥—Ä–∞—Ç—å",
        web_app=WebAppInfo(url="YOUR_WEBAPP_URL")
    ))
    return keyboard

def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å"))
    keyboard.add(KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å"))
    keyboard.add(KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å"))
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def start(message):
    user_id = str(message.from_user.id)
    username = message.from_user.username
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not get_user_data(user_id):
        update_user_data(user_id, {
            'username': username,
            'best_score': 0,
            'sun': 0,
            'has_sun_skin': False,
            'has_premium_skin': False
        })
        logger.info(f"New user registered: {user_id} (@{username})")
    
    bot.send_message(
        message.chat.id,
        "üêç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Star Snake!\n\n"
        "üéÆ –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –∑–º–µ–π–∫–æ–π, —Å–æ–±–∏—Ä–∞–π—Ç–µ —è–±–ª–æ–∫–∏ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ sun!\n"
        "üí´ –ü–æ–∫—É–ø–∞–π—Ç–µ —Å–∫–∏–Ω—ã –∏ —É–ª—É—á—à–µ–Ω–∏—è –≤ –º–∞–≥–∞–∑–∏–Ω–µ\n"
        "üèÜ –°–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å –∑–∞ –º–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ –∏–≥—Ä–æ–∫–æ–≤\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É:",
        reply_markup=get_webapp_keyboard()
    )

@bot.message_handler(commands=['stats'])
def stats(message):
    user_id = str(message.from_user.id)
    data = get_user_data(user_id)
    
    if data:
        stats_text = (
            f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"üèÜ –†–µ–∫–æ—Ä–¥: {data['best_score']}\n"
            f"‚òÄÔ∏è Sun: {data['sun']}\n"
            f"üé® Sun —Å–∫–∏–Ω: {'‚úÖ' if data['has_sun_skin'] else '‚ùå'}\n"
            f"‚ú® Premium: {'‚úÖ' if data['has_premium_skin'] else '‚ùå'}\n\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {data['registration_date'][:10]}"
        )
        
        bot.send_message(message.chat.id, stats_text)
    else:
        bot.send_message(
            message.chat.id,
            "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –°—ã–≥—Ä–∞–π—Ç–µ –≤ –∏–≥—Ä—É!"
        )

@bot.message_handler(commands=['premium'])
def give_premium(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    try:
        args = message.text.split()
        if len(args) != 2:
            bot.send_message(message.chat.id, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /premium USER_ID")
            return
        
        target_user_id = args[1]
        user_data = get_user_data(target_user_id)
        
        if not user_data:
            bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        user_data['has_premium_skin'] = True
        update_user_data(target_user_id, user_data)
        log_transaction(target_user_id, 'premium_given', 0)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            bot.send_message(
                int(target_user_id),
                "‚ú® –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –≤—ã–¥–∞–Ω Premium —Å–∫–∏–Ω!\n\n"
                "–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ Premium:\n"
                "‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Å–∫–∏–Ω\n"
                "‚Ä¢ +50% –∫ —Ñ–∞—Ä–º—É sun\n"
                "‚Ä¢ –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Ç–∞–π–º–µ—Ä –º–µ–∂–¥—É –∏–≥—Ä–∞–º–∏"
            )
        except:
            logger.error(f"Could not send message to user {target_user_id}")
        
        bot.send_message(
            message.chat.id,
            f"‚úÖ Premium —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}"
        )
        
    except Exception as e:
        logger.error(f"Error giving premium: {e}")
        bot.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ Premium"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@bot.message_handler(content_types=['web_app_data'])
def web_app_data(message):
    try:
        data = json.loads(message.web_app_data.data)
        user_id = str(message.from_user.id)
        user_data = get_user_data(user_id) or {}
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        user_data['best_score'] = max(user_data.get('best_score', 0), data.get('bestScore', 0))
        user_data['sun'] = data.get('sun', user_data.get('sun', 0))
        user_data['has_sun_skin'] = data.get('hasSunSkin', user_data.get('has_sun_skin', False))
        user_data['has_premium_skin'] = data.get('hasPremiumSkin', user_data.get('has_premium_skin', False))
        user_data['last_game'] = datetime.now().isoformat()
        
        update_user_data(user_id, user_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥
        if data.get('bestScore', 0) > user_data.get('best_score', 0):
            bot.send_message(
                message.chat.id,
                f"üèÜ –ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥: {data['bestScore']}!"
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä—ã
        bot.send_message(
            message.chat.id,
            f"üéÆ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"üèÜ –°—á—ë—Ç: {data.get('score', 0)}\n"
            f"‚òÄÔ∏è –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {data.get('sun', 0) - user_data.get('sun', 0)}\n"
            f"üí∞ –í—Å–µ–≥–æ sun: {data.get('sun', 0)}"
        )
        
    except json.JSONDecodeError:
        logger.error("Invalid JSON data received")
        bot.send_message(
            message.chat.id,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã"
        )
    except Exception as e:
        logger.error(f"Error processing web app data: {e}\n{traceback.format_exc()}")
        bot.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"
        )

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
def check_subscription(user_id):
    try:
        member = bot.get_chat_member(CHANNEL_ID, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except:
        return False

# –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def backup_data():
    while True:
        try:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            os.system('cp snake_game.db snake_game_backup.db')
            logger.info("Database backup created")
        except Exception as e:
            logger.error(f"Backup error: {e}")
        time.sleep(3600)  # –ö–∞–∂–¥—ã–π —á–∞—Å

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    backup_thread = threading.Thread(target=backup_data)
    backup_thread.daemon = True
    backup_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("Bot started")
    bot.infinity_polling()