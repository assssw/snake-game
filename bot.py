import telebot
from telebot.types import WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
import json
import os
from datetime import datetime, timedelta
import sqlite3
import threading
import time
import logging
import traceback

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)
logger.info("Bot initialization started")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = '8028147928:AAHC2PSGPmrYYRn7vSQ5sXnw4QNrbX69ZU8'
ADMIN_ID = 1454515378
CHANNEL_ID = '@mariartytt'
bot = telebot.TeleBot(TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    try:
        conn = sqlite3.connect('snake_game.db')
        c = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        c.execute('''CREATE TABLE IF NOT EXISTS users
                     (user_id TEXT PRIMARY KEY,
                      username TEXT,
                      sun INTEGER DEFAULT 0,
                      has_sun_skin BOOLEAN DEFAULT 0,
                      has_premium_skin BOOLEAN DEFAULT 0,
                      subscription_task_completed BOOLEAN DEFAULT 0,
                      referral_count INTEGER DEFAULT 0,
                      last_game TEXT,
                      registration_date TEXT)''')
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        c.execute('''CREATE TABLE IF NOT EXISTS transactions
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                      user_id TEXT,
                      type TEXT,
                      amount INTEGER,
                      timestamp TEXT)''')
        
        conn.commit()
        logger.info("Database initialized successfully")
    except Exception as e:
        logger.error(f"Error initializing database: {e}")
    finally:
        conn.close()

init_db()

def get_user_data(user_id):
    try:
        conn = sqlite3.connect('snake_game.db')
        c = conn.cursor()
        c.execute('SELECT * FROM users WHERE user_id = ?', (str(user_id),))
        data = c.fetchone()
        conn.close()
        
        if data:
            return {
                'user_id': data[0],
                'username': data[1],
                'sun': data[2],
                'has_sun_skin': bool(data[3]),
                'has_premium_skin': bool(data[4]),
                'subscription_task_completed': bool(data[5]),
                'referral_count': data[6],
                'last_game': data[7],
                'registration_date': data[8]
            }
        return None
    except Exception as e:
        logger.error(f"Error getting user data: {e}")
        return None

def update_user_data(user_id, data):
    try:
        conn = sqlite3.connect('snake_game.db')
        c = conn.cursor()
        c.execute('''INSERT OR REPLACE INTO users 
                     (user_id, username, sun, has_sun_skin, has_premium_skin, 
                      subscription_task_completed, referral_count, last_game, registration_date)
                     VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)''',
                 (str(user_id), data.get('username'), data.get('sun', 0),
                  data.get('has_sun_skin', False), data.get('has_premium_skin', False),
                  data.get('subscription_task_completed', False), data.get('referral_count', 0),
                  data.get('last_game', datetime.now().isoformat()),
                  data.get('registration_date', datetime.now().isoformat())))
        conn.commit()
        logger.info(f"Updated data for user {user_id}")
    except Exception as e:
        logger.error(f"Error updating user data: {e}")
    finally:
        conn.close()

def log_transaction(user_id, type, amount):
    try:
        conn = sqlite3.connect('snake_game.db')
        c = conn.cursor()
        c.execute('''INSERT INTO transactions (user_id, type, amount, timestamp)
                     VALUES (?, ?, ?, ?)''',
                 (str(user_id), type, amount, datetime.now().isoformat()))
        conn.commit()
        logger.info(f"Logged transaction: {user_id} {type} {amount}")
    except Exception as e:
        logger.error(f"Error logging transaction: {e}")
    finally:
        conn.close()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_webapp_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(
        text="üéÆ –ò–≥—Ä–∞—Ç—å",
        web_app=WebAppInfo(url="https://assssw.github.io/snake-game/")
    ))
    return keyboard

def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(KeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å"))
    keyboard.row(KeyboardButton("üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥"), KeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª–∫–∞"))
    keyboard.row(KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å"))
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def start(message):
    try:
        user_id = str(message.from_user.id)
        username = message.from_user.username
        
        if not username:
            bot.send_message(
                message.chat.id,
                "‚ùå –î–ª—è –∏–≥—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
        args = message.text.split()
        referrer_id = args[1] if len(args) > 1 else None
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = get_user_data(user_id)
        if not user_data:
            user_data = {
                'user_id': user_id,
                'username': username,
                'sun': 20 if referrer_id else 0,
                'has_sun_skin': False,
                'has_premium_skin': False,
                'subscription_task_completed': False,
                'referral_count': 0,
                'last_game': None,
                'registration_date': datetime.now().isoformat()
            }
            update_user_data(user_id, user_data)
            
            # –ù–∞–≥—Ä–∞–∂–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
            if referrer_id:
                referrer_data = get_user_data(referrer_id)
                if referrer_data:
                    referrer_data['sun'] = referrer_data.get('sun', 0) + 20
                    referrer_data['referral_count'] = referrer_data.get('referral_count', 0) + 1
                    update_user_data(referrer_id, referrer_data)
                    log_transaction(referrer_id, 'referral_bonus', 20)
                    
                    bot.send_message(
                        referrer_id,
                        f"üéâ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª @{username}!\n"
                        f"–ü–æ–ª—É—á–µ–Ω–æ: +20 ‚òÄÔ∏è\n"
                        f"–í—Å–µ–≥–æ sun: {referrer_data['sun']}"
                    )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(
            message.chat.id,
            "üêç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Star Snake!\n\n"
            "üéÆ –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –∑–º–µ–π–∫–æ–π, —Å–æ–±–∏—Ä–∞–π—Ç–µ —è–±–ª–æ–∫–∏ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ sun!\n"
            "üí´ –ü–æ–∫—É–ø–∞–π—Ç–µ —Å–∫–∏–Ω—ã –∏ —É–ª—É—á—à–µ–Ω–∏—è –≤ –º–∞–≥–∞–∑–∏–Ω–µ\n"
            "üèÜ –°–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å –∑–∞ –º–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ –∏–≥—Ä–æ–∫–æ–≤\n"
            "üë• –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É:",
            reply_markup=get_webapp_keyboard()
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error in start command: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")

@bot.message_handler(func=lambda message: message.text == "üéÆ –ò–≥—Ä–∞—Ç—å")
def play_button(message):
    try:
        if not message.from_user.username:
            bot.send_message(
                message.chat.id,
                "‚ùå –î–ª—è –∏–≥—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram"
            )
            return
            
        bot.send_message(
            message.chat.id,
            "üéÆ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É:",
            reply_markup=get_webapp_keyboard()
        )
    except Exception as e:
        logger.error(f"Error in play button: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@bot.message_handler(func=lambda message: message.text == "üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥")
def show_leaderboard_button(message):
    try:
        conn = sqlite3.connect('snake_game.db')
        c = conn.cursor()
        c.execute('''SELECT username, sun 
                    FROM users 
                    WHERE username IS NOT NULL 
                    ORDER BY sun DESC 
                    LIMIT 10''')
        leaders = c.fetchall()
        conn.close()
        
        if not leaders:
            bot.send_message(message.chat.id, "üèÜ –ü–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ç–æ–ø–µ")
            return
            
        text = "üèÜ –¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤:\n\n"
        for i, (username, sun) in enumerate(leaders, 1):
            medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else "üëë"
            text += f"{medal} {i}. @{username}\n‚îî {sun} ‚òÄÔ∏è\n\n"
        
        bot.send_message(message.chat.id, text)
        
    except Exception as e:
        logger.error(f"Error showing leaderboard: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞")

@bot.message_handler(func=lambda message: message.text == "üë• –†–µ—Ñ–µ—Ä–∞–ª–∫–∞")
def show_referral_button(message):
    try:
        if not message.from_user.username:
            bot.send_message(
                message.chat.id,
                "‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å username"
            )
            return
            
        user_id = str(message.from_user.id)
        bot_username = bot.get_me().username
        link = f"https://t.me/{bot_username}?start={user_id}"
        
        user_data = get_user_data(user_id)
        if not user_data:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
            return
            
        text = (
            f"üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n\n"
            f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n{link}\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user_data['referral_count']}\n"
            f"‚Ä¢ Sun: {user_data['sun']} ‚òÄÔ∏è\n\n"
            f"üí∞ –ù–∞–≥—Ä–∞–¥—ã:\n"
            f"‚Ä¢ +20 ‚òÄÔ∏è –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞\n"
            f"‚Ä¢ +10% –æ—Ç —Ñ–∞—Ä–º–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n\n"
            f"‚ÑπÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º –∏\n"
            f"–ø–æ–ª—É—á–∞–π—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∏—Ö –∏–≥—Ä—É!"
        )
        
        bot.send_message(message.chat.id, text)
    except Exception as e:
        logger.error(f"Error showing referral: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@bot.message_handler(commands=['give_sun'])
def give_sun(message):
    if message.from_user.id != ADMIN_ID:
        return
    
    try:
        args = message.text.split()
        if len(args) != 3:
            bot.send_message(message.chat.id, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /give_sun USERNAME AMOUNT")
            return
            
        username = args[1].replace('@', '')
        amount = int(args[2])
        
        conn = sqlite3.connect('snake_game.db')
        c = conn.cursor()
        c.execute('SELECT user_id FROM users WHERE username = ?', (username,))
        result = c.fetchone()
        conn.close()
        
        if not result:
            bot.send_message(message.chat.id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        user_id = result[0]
        user_data = get_user_data(user_id)
        user_data['sun'] = user_data.get('sun', 0) + amount
        update_user_data(user_id, user_data)
        log_transaction(user_id, 'admin_give_sun', amount)
        
        bot.send_message(
            user_id,
            f"üéÅ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ã–¥–∞–ª –≤–∞–º {amount} ‚òÄÔ∏è!"
        )
        
        bot.send_message(
            message.chat.id,
            f"‚úÖ –í—ã–¥–∞–Ω–æ {amount} ‚òÄÔ∏è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}"
        )
        
    except Exception as e:
        logger.error(f"Error giving sun: {e}")
        bot.send_message(message.chat.id, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /give_sun USERNAME AMOUNT")

@bot.message_handler(commands=['stats'])
def admin_stats(message):
    if message.from_user.id != ADMIN_ID:
        return
    
    try:
        conn = sqlite3.connect('snake_game.db')
        c = conn.cursor()
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        c.execute('SELECT COUNT(*) FROM users')
        total_users = c.fetchone()[0]
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ 24 —á–∞—Å–∞
        yesterday = (datetime.now() - timedelta(days=1)).isoformat()
        c.execute('SELECT COUNT(*) FROM users WHERE last_game > ?', (yesterday,))
        active_users = c.fetchone()[0]
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ sun
        c.execute('SELECT SUM(sun) FROM users')
        total_sun = c.fetchone()[0] or 0
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        c.execute('SELECT COUNT(*) FROM users WHERE has_premium_skin = 1')
        premium_users = c.fetchone()[0]
        
        conn.close()
        
        text = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"üì± –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24—á: {active_users}\n"
            f"‚òÄÔ∏è –í—Å–µ–≥–æ sun: {total_sun}\n"
            f"‚ú® Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {premium_users}"
        )
        
        bot.send_message(message.chat.id, text)
        
    except Exception as e:
        logger.error(f"Error showing stats: {e}")
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

@bot.message_handler(commands=['broadcast'])
def broadcast(message):
    if message.from_user.id != ADMIN_ID:
        return
    
    try:
        text = message.text.split(maxsplit=1)[1]
        
        conn = sqlite3.connect('snake_game.db')
        c = conn.cursor()
        c.execute('SELECT user_id FROM users')
        users = c.fetchall()
        conn.close()
        
        success = 0
        failed = 0
        
        for user in users:
            try:
                bot.send_message(user[0], text)
                success += 1
            except:
                failed += 1
        
        bot.send_message(
            message.chat.id,
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
            f"–£—Å–ø–µ—à–Ω–æ: {success}\n"
            f"–û—à–∏–±–æ–∫: {failed}"
        )
        
    except Exception as e:
        logger.error(f"Error broadcasting: {e}")
        bot.send_message(message.chat.id, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast –¢–ï–ö–°–¢")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@bot.message_handler(content_types=['web_app_data'])
def web_app_data(message):
    try:
        data = json.loads(message.web_app_data.data)
        user_id = str(message.from_user.id)
        user_data = get_user_data(user_id)
        
        if not user_data:
            logger.error(f"User data not found: {user_id}")
            return
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        earned_sun = data.get('sun', 0) - user_data.get('sun', 0)
        user_data['sun'] = data.get('sun', user_data.get('sun', 0))
        user_data['last_game'] = datetime.now().isoformat()
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä, –Ω–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å
        if user_data.get('referrer_id') and earned_sun > 0:
            referrer_data = get_user_data(user_data['referrer_id'])
            if referrer_data:
                referral_bonus = int(earned_sun * 0.1)  # 10% –æ—Ç –∑–∞—Ä–∞–±–æ—Ç–∫–∞
                referrer_data['sun'] = referrer_data.get('sun', 0) + referral_bonus
                update_user_data(user_data['referrer_id'], referrer_data)
                log_transaction(user_data['referrer_id'], 'referral_farm_bonus', referral_bonus)
                
                bot.send_message(
                    user_data['referrer_id'],
                    f"üí∞ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –∑–∞—Ä–∞–±–æ—Ç–∞–ª {earned_sun} ‚òÄÔ∏è\n"
                    f"–í–∞—à –±–æ–Ω—É—Å: +{referral_bonus} ‚òÄÔ∏è"
                )
        
        update_user_data(user_id, user_data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä—ã
        bot.send_message(
            message.chat.id,
            f"üéÆ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚òÄÔ∏è –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {earned_sun}\n"
            f"üí∞ –í—Å–µ–≥–æ sun: {user_data['sun']}"
        )
        
    except Exception as e:
        logger.error(f"Error processing web app data: {e}\n{traceback.format_exc()}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    logger.info("Bot started")
    try:
        bot.infinity_polling(timeout=10, long_polling_timeout=5)
    except Exception as e:
        logger.error(f"Bot polling error: {e}")