import telebot
from telebot.types import WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
import json
import os
from datetime import datetime, timedelta
import sqlite3
import threading
import time
import logging
import traceback

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = '8028147928:AAHC2PSGPmrYYRn7vSQ5sXnw4QNrbX69ZU8'
ADMIN_ID = 1454515378
CHANNEL_ID = '@mariartytt'
bot = telebot.TeleBot(TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    try:
        conn = sqlite3.connect('snake_game.db')
        c = conn.cursor()
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        c.execute('DROP TABLE IF EXISTS users')
        c.execute('DROP TABLE IF EXISTS transactions')
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        c.execute('''CREATE TABLE IF NOT EXISTS users
                     (user_id TEXT PRIMARY KEY,
                      username TEXT,
                      best_score INTEGER DEFAULT 0,
                      sun INTEGER DEFAULT 0,
                      has_sun_skin BOOLEAN DEFAULT 0,
                      has_premium_skin BOOLEAN DEFAULT 0,
                      last_game TEXT,
                      registration_date TEXT,
                      referrer_id TEXT,
                      referral_count INTEGER DEFAULT 0)''')
        
        c.execute('''CREATE TABLE IF NOT EXISTS transactions
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                      user_id TEXT,
                      type TEXT,
                      amount INTEGER,
                      timestamp TEXT,
                      FOREIGN KEY (user_id) REFERENCES users(user_id))''')
        
        conn.commit()
        logger.info("Database initialized successfully")
    except Exception as e:
        logger.error(f"Error initializing database: {e}")
    finally:
        conn.close()

init_db()

def get_user_by_username(username):
    conn = sqlite3.connect('snake_game.db')
    c = conn.cursor()
    username = username.replace('@', '')
    c.execute('SELECT * FROM users WHERE username = ?', (username,))
    data = c.fetchone()
    conn.close()
    if data:
        return {
            'user_id': data[0],
            'username': data[1],
            'best_score': data[2],
            'sun': data[3],
            'has_sun_skin': bool(data[4]),
            'has_premium_skin': bool(data[5]),
            'last_game': data[6],
            'registration_date': data[7],
            'referrer_id': data[8],
            'referral_count': data[9]
        }
    return None

def get_user_data(user_id):
    conn = sqlite3.connect('snake_game.db')
    c = conn.cursor()
    c.execute('SELECT * FROM users WHERE user_id = ?', (str(user_id),))
    data = c.fetchone()
    conn.close()
    if data:
        return {
            'user_id': data[0],
            'username': data[1],
            'best_score': data[2],
            'sun': data[3],
            'has_sun_skin': bool(data[4]),
            'has_premium_skin': bool(data[5]),
            'last_game': data[6],
            'registration_date': data[7],
            'referrer_id': data[8],
            'referral_count': data[9]
        }
    return {
        'user_id': str(user_id),
        'username': None,
        'best_score': 0,
        'sun': 0,
        'has_sun_skin': False,
        'has_premium_skin': False,
        'last_game': None,
        'registration_date': None,
        'referrer_id': None,
        'referral_count': 0
    }

def update_user_data(user_id, data):
    conn = sqlite3.connect('snake_game.db')
    c = conn.cursor()
    try:
        c.execute('''INSERT OR REPLACE INTO users 
                     (user_id, username, best_score, sun, has_sun_skin, has_premium_skin, last_game, registration_date, referrer_id, referral_count)
                     VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)''',
                 (str(user_id), data.get('username'), data.get('best_score', 0),
                  data.get('sun', 0), data.get('has_sun_skin', False),
                  data.get('has_premium_skin', False), datetime.now().isoformat(),
                  data.get('registration_date', datetime.now().isoformat()),
                  data.get('referrer_id'), data.get('referral_count', 0)))
        conn.commit()
    except Exception as e:
        logger.error(f"Error updating user data: {e}")
        conn.rollback()
    finally:
        conn.close()

def log_transaction(user_id, type, amount):
    conn = sqlite3.connect('snake_game.db')
    c = conn.cursor()
    try:
        c.execute('''INSERT INTO transactions (user_id, type, amount, timestamp)
                     VALUES (?, ?, ?, ?)''',
                 (str(user_id), type, amount, datetime.now().isoformat()))
        conn.commit()
    except Exception as e:
        logger.error(f"Error logging transaction: {e}")
        conn.rollback()
    finally:
        conn.close()

def get_leaderboard():
    conn = sqlite3.connect('snake_game.db')
    c = conn.cursor()
    c.execute('''SELECT username, best_score FROM users 
                 ORDER BY best_score DESC LIMIT 10''')
    data = c.fetchall()
    conn.close()
    return data

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_webapp_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(
        text="üéÆ –ò–≥—Ä–∞—Ç—å",
        web_app=WebAppInfo(url="https://assssw.github.io/snake-game/")
    ))
    return keyboard

def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(KeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å"))
    keyboard.row(KeyboardButton("üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥"), KeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª–∫–∞"))
    keyboard.row(KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å"))
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def start(message):
    user_id = str(message.from_user.id)
    username = message.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
    args = message.text.split()
    referrer_id = args[1] if len(args) > 1 else None
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not get_user_data(user_id).get('username'):
        initial_sun = 20 if referrer_id else 0
        update_user_data(user_id, {
            'username': username,
            'best_score': 0,
            'sun': initial_sun,
            'has_sun_skin': False,
            'has_premium_skin': False,
            'referrer_id': referrer_id
        })
        
        # –ù–∞–≥—Ä–∞–∂–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
        if referrer_id:
            referrer_data = get_user_data(referrer_id)
            if referrer_data.get('username'):
                referrer_data['sun'] = referrer_data.get('sun', 0) + 20
                referrer_data['referral_count'] = referrer_data.get('referral_count', 0) + 1
                update_user_data(referrer_id, referrer_data)
                
                bot.send_message(
                    referrer_id, 
                    f"üéâ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª! –ü–æ–ª—É—á–µ–Ω–æ:\n"
                    f"‚Ä¢ +20 ‚òÄÔ∏è –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ\n"
                    f"‚Ä¢ 10% –æ—Ç —Ñ–∞—Ä–º–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞"
                )
                
                bot.send_message(
                    message.chat.id, 
                    f"üéÅ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
                    f"–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ:\n"
                    f"‚Ä¢ +20 ‚òÄÔ∏è –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ"
                )
        else:
            bot.send_message(
                message.chat.id, 
                f"üéÅ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É!"
            )
        
        logger.info(f"New user registered: {user_id} (@{username})")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.send_message(
        message.chat.id,
        "üêç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Star Snake!\n\n"
        "üéÆ –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –∑–º–µ–π–∫–æ–π, —Å–æ–±–∏—Ä–∞–π—Ç–µ —è–±–ª–æ–∫–∏ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ sun!\n"
        "üí´ –ü–æ–∫—É–ø–∞–π—Ç–µ —Å–∫–∏–Ω—ã –∏ —É–ª—É—á—à–µ–Ω–∏—è –≤ –º–∞–≥–∞–∑–∏–Ω–µ\n"
        "üèÜ –°–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å –∑–∞ –º–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ –∏–≥—Ä–æ–∫–æ–≤\n"
        "üë• –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É:",
        reply_markup=get_webapp_keyboard()
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )

@bot.message_handler(func=lambda message: message.text == "üéÆ –ò–≥—Ä–∞—Ç—å")
def play_button(message):
    bot.send_message(
        message.chat.id,
        "üéÆ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É:",
        reply_markup=get_webapp_keyboard()
    )

@bot.message_handler(func=lambda message: message.text == "üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥")
def show_leaderboard_button(message):
    leaderboard = get_leaderboard()
    text = "üèÜ –¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤:\n\n"
    for i, (username, score) in enumerate(leaderboard, 1):
        text += f"{i}. @{username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'} ‚Äî {score}\n"
    bot.send_message(message.chat.id, text)

@bot.message_handler(func=lambda message: message.text == "üë• –†–µ—Ñ–µ—Ä–∞–ª–∫–∞")
def show_referral_button(message):
    bot_username = bot.get_me().username
    user_id = str(message.from_user.id)
    link = f"https://t.me/{bot_username}?start={user_id}"
    
    user_data = get_user_data(user_id)
    refs_count = user_data.get('referral_count', 0)
    
    text = (
        f"üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n\n"
        f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n{link}\n\n"
        f"üìä –í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã: {refs_count}\n\n"
        f"üí∞ –ù–∞–≥—Ä–∞–¥—ã:\n"
        f"‚Ä¢ +20 ‚òÄÔ∏è –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞\n"
        f"‚Ä¢ +10% –æ—Ç —Ñ–∞—Ä–º–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n"
        f"‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª –ø–æ–ª—É—á–∞–µ—Ç +20 ‚òÄÔ∏è\n\n"
        f"‚ÑπÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º –∏\n"
        f"–ø–æ–ª—É—á–∞–π—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∏—Ö –∏–≥—Ä—É!"
    )
    
    bot.send_message(message.chat.id, text)

@bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
def help_button(message):
    help_text = (
        "üéÆ –ö–∞–∫ –∏–≥—Ä–∞—Ç—å:\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –∑–º–µ–π–∫–æ–π —Å—Ç—Ä–µ–ª–∫–∞–º–∏ –∏–ª–∏ —Å–≤–∞–π–ø–∞–º–∏\n"
        "‚Ä¢ –°–æ–±–∏—Ä–∞–π—Ç–µ —è–±–ª–æ–∫–∏ –¥–ª—è —Ä–æ—Å—Ç–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è sun\n"
        "‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π —Å–æ —Å—Ç–µ–Ω–∞–º–∏ –∏ —Ö–≤–æ—Å—Ç–æ–º\n\n"
        "üí∞ Sun –∏ —Å–∫–∏–Ω—ã:\n"
        "‚Ä¢ Sun –º–æ–∂–Ω–æ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ —Å–∫–∏–Ω—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ\n"
        "‚Ä¢ Sun —Å–∫–∏–Ω –¥–∞—ë—Ç +10% –∫ —Ñ–∞—Ä–º—É\n"
        "‚Ä¢ Premium —Å–∫–∏–Ω –¥–∞—ë—Ç +50% –∫ —Ñ–∞—Ä–º—É\n\n"
        "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:\n"
        "‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã\n"
        "‚Ä¢ +20 ‚òÄÔ∏è –∑–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞\n"
        "‚Ä¢ +10% –æ—Ç —Ñ–∞—Ä–º–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"
    )
    bot.send_message(message.chat.id, help_text)

# –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
@bot.message_handler(commands=['give_premium'])
def give_premium(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    try:
        args = message.text.split()
        if len(args) != 2:
            bot.send_message(message.chat.id, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /give_premium USERNAME")
            return
        
        username = args[1].replace('@', '')
        user_data = get_user_by_username(username)
        
        if not user_data:
            bot.send_message(message.chat.id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        user_data['has_premium_skin'] = True
        update_user_data(user_data['user_id'], user_data)
        log_transaction(user_data['user_id'], 'premium_given', 0)
        
        try:
            bot.send_message(
                int(user_data['user_id']),
                "‚ú® –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –≤—ã–¥–∞–Ω Premium —Å–∫–∏–Ω!\n\n"
                "–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ Premium:\n"
                "‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Å–∫–∏–Ω\n"
                "‚Ä¢ +50% –∫ —Ñ–∞—Ä–º—É sun\n"
                "‚Ä¢ –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Ç–∞–π–º–µ—Ä –º–µ–∂–¥—É –∏–≥—Ä–∞–º–∏"
            )
        except Exception as e:
            logger.error(f"Could not send message to user {user_data['user_id']}: {e}")
        
        bot.send_message(
            message.chat.id,
            f"‚úÖ Premium —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}"
        )
        
    except Exception as e:
        logger.error(f"Error giving premium: {e}")
        bot.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ Premium"
        )

@bot.message_handler(commands=['remove_premium'])
def remove_premium(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    try:
        args = message.text.split()
        if len(args) != 2:
            bot.send_message(message.chat.id, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_premium USERNAME")
            return
        
        username = args[1].replace('@', '')
        user_data = get_user_by_username(username)
        
        if not user_data:
            bot.send_message(message.chat.id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        user_data['has_premium_skin'] = False
        update_user_data(user_data['user_id'], user_data)
        log_transaction(user_data['user_id'], 'premium_removed', 0)
        
        try:
            bot.send_message(
                int(user_data['user_id']),
                "‚ùå –í–∞—à Premium —Å–∫–∏–Ω –±—ã–ª –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
            )
        except Exception as e:
            logger.error(f"Could not send message to user {user_data['user_id']}: {e}")
        
        bot.send_message(
            message.chat.id,
            f"‚úÖ Premium —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}"
        )
        
    except Exception as e:
        logger.error(f"Error removing premium: {e}")
        bot.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ Premium"
        )

@bot.message_handler(commands=['give_sun'])
def give_sun(message):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        args = message.text.split()
        if len(args) != 3:
            bot.send_message(message.chat.id, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /give_sun USERNAME AMOUNT")
            return
            
        username = args[1].replace('@', '')
        amount = int(args[2])
        
        user_data = get_user_by_username(username)
        if user_data:
            user_data['sun'] = user_data.get('sun', 0) + amount
            update_user_data(user_data['user_id'], user_data)
            log_transaction(user_data['user_id'], 'admin_give_sun', amount)
            
            bot.send_message(message.chat.id, f"‚úÖ –í—ã–¥–∞–Ω–æ {amount} ‚òÄÔ∏è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}")
            bot.send_message(int(user_data['user_id']), f"üéÅ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ã–¥–∞–ª –≤–∞–º {amount} ‚òÄÔ∏è!")
        else:
            bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except:
        bot.send_message(message.chat.id, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /give_sun USERNAME AMOUNT")

@bot.message_handler(commands=['user_info'])
def user_info(message):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        username = message.text.split()[1].replace('@', '')
        user_data = get_user_by_username(username)
        
        if user_data:
            text = (
                f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n\n"
                f"ID: {user_data['user_id']}\n"
                f"Username: @{user_data['username']}\n"
                f"–†–µ–∫–æ—Ä–¥: {user_data['best_score']}\n"
                f"Sun: {user_data['sun']}\n"
                f"Sun —Å–∫–∏–Ω: {'‚úÖ' if user_data['has_sun_skin'] else '‚ùå'}\n"
                f"Premium: {'‚úÖ' if user_data['has_premium_skin'] else '‚ùå'}\n"
                f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∏–≥—Ä–∞: {user_data['last_game']}\n"
                f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_data['registration_date']}\n"
                f"–†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user_data.get('referral_count', 0)}"
            )
            bot.send_message(message.chat.id, text)
        else:
            bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except:
        bot.send_message(message.chat.id, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /user_info USERNAME")

@bot.message_handler(commands=['stats'])
def admin_stats(message):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        conn = sqlite3.connect('snake_game.db')
        c = conn.cursor()
        
        c.execute('SELECT COUNT(*) FROM users')
        total_users = c.fetchone()[0]
        
        yesterday = (datetime.now() - timedelta(days=1)).isoformat()
        c.execute('SELECT COUNT(*) FROM users WHERE last_game > ?', (yesterday,))
        active_users = c.fetchone()[0]
        
        c.execute('SELECT SUM(sun) FROM users')
        total_sun = c.fetchone()[0] or 0
        
        c.execute('SELECT COUNT(*) FROM users WHERE has_premium_skin = 1')
        premium_users = c.fetchone()[0]
        
        conn.close()
        
        text = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"üì± –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24—á: {active_users}\n"
            f"‚òÄÔ∏è –í—Å–µ–≥–æ sun: {total_sun}\n"
            f"‚ú® Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {premium_users}"
        )
        
        bot.send_message(message.chat.id, text)
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

@bot.message_handler(commands=['broadcast'])
def broadcast(message):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        text = message.text.split(maxsplit=1)[1]
        
        conn = sqlite3.connect('snake_game.db')
        c = conn.cursor()
        c.execute('SELECT user_id FROM users')
        users = c.fetchall()
        conn.close()
        
        success = 0
        failed = 0
        
        for user in users:
            try:
                bot.send_message(user[0], text)
                success += 1
            except:
                failed += 1
        
        bot.send_message(
            message.chat.id,
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
            f"–£—Å–ø–µ—à–Ω–æ: {success}\n"
            f"–û—à–∏–±–æ–∫: {failed}"
        )
    except:
        bot.send_message(
            message.chat.id,
            "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast –¢–ï–ö–°–¢"
        )

@bot.message_handler(commands=['clear_db'])
def clear_database(message):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        init_db()  # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        bot.send_message(message.chat.id, "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@bot.message_handler(content_types=['web_app_data'])
def web_app_data(message):
    try:
        data = json.loads(message.web_app_data.data)
        user_id = str(message.from_user.id)
        user_data = get_user_data(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º sun
        earned_sun = data.get('sun', 0) - user_data.get('sun', 0)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä, –Ω–∞—á–∏—Å–ª—è–µ–º –µ–º—É 10%
        if user_data.get('referrer_id'):
            referrer_data = get_user_data(user_data['referrer_id'])
            if referrer_data.get('username') and earned_sun > 0:
                referral_bonus = int(earned_sun * 0.1)  # 10% –æ—Ç –∑–∞—Ä–∞–±–æ—Ç–∫–∞
                referrer_data['sun'] = referrer_data.get('sun', 0) + referral_bonus
                update_user_data(user_data['referrer_id'], referrer_data)
                try:
                    bot.send_message(
                        user_data['referrer_id'],
                        f"üí∞ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –∑–∞—Ä–∞–±–æ—Ç–∞–ª {earned_sun} ‚òÄÔ∏è\n"
                        f"–í–∞—à –±–æ–Ω—É—Å: +{referral_bonus} ‚òÄÔ∏è"
                    )
                except:
                    logger.error(f"Could not send referral bonus message to {user_data['referrer_id']}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data['best_score'] = max(user_data.get('best_score', 0), data.get('bestScore', 0))
        user_data['sun'] = data.get('sun', user_data.get('sun', 0))
        user_data['has_sun_skin'] = data.get('hasSunSkin', user_data.get('has_sun_skin', False))
        user_data['has_premium_skin'] = data.get('hasPremiumSkin', user_data.get('has_premium_skin', False))
        user_data['last_game'] = datetime.now().isoformat()
        
        update_user_data(user_id, user_data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä—ã
        bot.send_message(
            message.chat.id,
            f"üéÆ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"üèÜ –°—á—ë—Ç: {data.get('score', 0)}\n"
            f"‚òÄÔ∏è –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {earned_sun}\n"
            f"üí∞ –í—Å–µ–≥–æ sun: {data.get('sun', 0)}"
        )
        
    except Exception as e:
        logger.error(f"Error processing web app data: {e}\n{traceback.format_exc()}")
        bot.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"
        )

# –§—É–Ω–∫—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Windows
def backup_data():
    while True:
        try:
            os.system('copy snake_game.db snake_game_backup.db')
            logger.info("Database backup created")
        except Exception as e:
            logger.error(f"Backup error: {e}")
        time.sleep(3600)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    backup_thread = threading.Thread(target=backup_data)
    backup_thread.daemon = True
    backup_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("Bot started")
    bot.infinity_polling()